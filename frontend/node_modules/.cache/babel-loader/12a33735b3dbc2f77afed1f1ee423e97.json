{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandrapeshkina/projects/swtp-2022-07/frontend/src/NewSelect.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport ListItemText from '@mui/material/ListItemText';\nimport Select from '@mui/material/Select';\nimport Checkbox from '@mui/material/Checkbox';\nimport axios from \"axios\";\nimport { plotComparison } from './Chart';\nimport getPowerConsumptionValue, { getAvrgPowerConsumptionValue, getMaxPowerConsumptionValue } from './PowerConsumption';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\nexport default function SelectBox() {\n  _s();\n  const [selectedIds, setSelectedIds] = React.useState([]);\n  const handleChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    console.log(value);\n    setSelectedIds(\n    // On autofill we get a stringified value.\n    typeof value === 'string' ? value.split(' , ') : value);\n    const currentValue = typeof value === 'string' ? value.split(',') : value;\n    const respPromises = currentValue.map(item => getData(item));\n    console.log(respPromises);\n    Promise.all(respPromises).then(values => {\n      plotComparison(values);\n      console.log(values);\n    });\n    const respPromisesPowerConsump = currentValue.map(item => getPowerConsumptionValue(item));\n    console.log(respPromisesPowerConsump);\n    Promise.all(respPromisesPowerConsump).then(values => {\n      //add values to table\n      console.log('PowerConsumptionArray', values);\n    });\n    const respPromisesAvrgPowerConsump = currentValue.map(item => getAvrgPowerConsumptionValue(item));\n    console.log(respPromisesAvrgPowerConsump);\n    Promise.all(respPromisesAvrgPowerConsump).then(values => {\n      //add values to table\n      console.log('AvrgPowerConsumptionArray', values);\n    });\n    const respPromisesMaxPowerConsump = currentValue.map(item => getMaxPowerConsumptionValue(item));\n    console.log(respPromisesMaxPowerConsump);\n    Promise.all(respPromisesMaxPowerConsump).then(values => {\n      //add values to table\n      console.log('MaxPowerConsumptionArray', values);\n    });\n  };\n  const options = [];\n  for (var i = 1; i <= 56; i++) {\n    if (i !== 50 && i !== 30) {\n      options.push({\n        value: i,\n        text: `Gerät ${i}`\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'm-4',\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      sx: {\n        m: 1,\n        width: 300\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"demo-multiple-checkbox-label\",\n        children: \"Ger\\xE4te zum Vergleich w\\xE4hlen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"demo-multiple-checkbox-label\",\n        id: \"demo-multiple-checkbox\",\n        multiple: true,\n        value: selectedIds,\n        onChange: handleChange,\n        input: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n          label: \"Ger\\xE4te zum Vergleich w\\xE4hlen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 28\n        }, this),\n        renderValue: selected => selected.join(' , '),\n        MenuProps: MenuProps,\n        children: options.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: option.value,\n          children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n            checked: selectedIds.indexOf(option.value) > -1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: option.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this)]\n        }, option.text, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n  function getData(geraetNummer) {\n    if (geraetNummer !== '-1') {\n      return axios.get(`/api/get_graph_daten/${geraetNummer}`).then(response => {\n        console.log(response);\n        return {\n          id: geraetNummer,\n          data: response.data.messungen\n        };\n      });\n    }\n  }\n}\n_s(SelectBox, \"ndxFfIZ7sJtBEOivcsSBDBZx8+M=\");\n_c = SelectBox;\nvar _c;\n$RefreshReg$(_c, \"SelectBox\");","map":{"version":3,"names":["React","OutlinedInput","InputLabel","MenuItem","FormControl","ListItemText","Select","Checkbox","axios","plotComparison","getPowerConsumptionValue","getAvrgPowerConsumptionValue","getMaxPowerConsumptionValue","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","SelectBox","selectedIds","setSelectedIds","useState","handleChange","event","target","value","console","log","split","currentValue","respPromises","map","item","getData","Promise","all","then","values","respPromisesPowerConsump","respPromisesAvrgPowerConsump","respPromisesMaxPowerConsump","options","i","push","text","m","selected","join","option","indexOf","geraetNummer","get","response","id","data","messungen"],"sources":["/Users/aleksandrapeshkina/projects/swtp-2022-07/frontend/src/NewSelect.js"],"sourcesContent":["import * as React from 'react';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport ListItemText from '@mui/material/ListItemText';\nimport Select from '@mui/material/Select';\nimport Checkbox from '@mui/material/Checkbox';\nimport axios from \"axios\";\nimport {plotComparison} from './Chart';\nimport getPowerConsumptionValue, {getAvrgPowerConsumptionValue, getMaxPowerConsumptionValue} from './PowerConsumption';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250,\n        },\n    },\n};\n\nexport default function SelectBox() {\n    const [selectedIds, setSelectedIds] = React.useState([]);\n\n    const handleChange = (event) => {\n        const {\n            target: {value},\n        } = event;\n        console.log(value)\n        setSelectedIds(\n            // On autofill we get a stringified value.\n            typeof value === 'string' ? value.split(' , ') : value,\n        );\n        const currentValue = typeof value === 'string' ? value.split(',') : value;\n        const respPromises = currentValue.map(item => getData(item));\n        console.log(respPromises);\n        Promise.all(respPromises).then((values) => {\n            plotComparison(values);\n            console.log(values);\n        });\n\n        const respPromisesPowerConsump = currentValue.map(item => getPowerConsumptionValue(item));\n        console.log(respPromisesPowerConsump);\n        Promise.all(respPromisesPowerConsump).then((values) => {\n            //add values to table\n            console.log('PowerConsumptionArray', values);\n        });\n\n        const respPromisesAvrgPowerConsump = currentValue.map(item => getAvrgPowerConsumptionValue(item));\n        console.log(respPromisesAvrgPowerConsump);\n        Promise.all(respPromisesAvrgPowerConsump).then((values) => {\n            //add values to table\n            console.log('AvrgPowerConsumptionArray', values);\n        });\n\n        const respPromisesMaxPowerConsump = currentValue.map(item => getMaxPowerConsumptionValue(item));\n        console.log(respPromisesMaxPowerConsump);\n        Promise.all(respPromisesMaxPowerConsump).then((values) => {\n            //add values to table\n            console.log('MaxPowerConsumptionArray', values);\n        });\n    };\n\n    const options = [];\n    for (var i = 1; i <= 56; i++) {\n        if (i !== 50 && i !== 30) {\n            options.push({value: i, text: `Gerät ${i}`});\n        }\n    }\n\n    return (\n        <div className={'m-4'}>\n            <FormControl sx={{m: 1, width: 300}}>\n                <InputLabel id=\"demo-multiple-checkbox-label\">Geräte zum Vergleich wählen</InputLabel>\n                <Select\n                    labelId=\"demo-multiple-checkbox-label\"\n                    id=\"demo-multiple-checkbox\"\n                    multiple\n                    value={selectedIds}\n                    onChange={handleChange}\n\n                    input={<OutlinedInput label=\"Geräte zum Vergleich wählen\"/>}\n                    renderValue={(selected) => selected.join(' , ')}\n                    MenuProps={MenuProps}\n                >\n                    {options.map((option) => (\n                        <MenuItem key={option.text} value={option.value}>\n                            <Checkbox checked={selectedIds.indexOf(option.value) > -1}/>\n                            <ListItemText primary={option.text}/>\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n            {/* <div className='Graph' id=\"graphvergleich\"></div> */}\n        </div>\n    );\n\n    function getData(geraetNummer) {\n        if (geraetNummer !== '-1') {\n            return axios.get(`/api/get_graph_daten/${geraetNummer}`).then(response => {\n                console.log(response)\n                return {id: geraetNummer, data: response.data.messungen};\n            })\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandrapeshkina/projects/swtp-2022-07/frontend/src/NewSelect.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport ListItemText from '@mui/material/ListItemText';\nimport Select from '@mui/material/Select';\nimport Checkbox from '@mui/material/Checkbox';\nimport axios from \"axios\";\nimport { plotComparison } from './Chart';\nimport getPowerConsumptionValue, { getAvrgPowerConsumptionValue, getMaxPowerConsumptionValue } from './PowerConsumption';\n// import {createRow} from \"./StatisticsTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\nexport default function SelectBox() {\n  _s();\n  const [selectedIds, setSelectedIds] = React.useState([]);\n  const handleChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    console.log(value);\n    setSelectedIds(\n    // On autofill we get a stringified value.\n    typeof value === 'string' ? value.split(' , ') : value);\n    const currentValue = typeof value === 'string' ? value.split(',') : value;\n    const respPromises = currentValue.map(item => getData(item));\n    console.log(respPromises);\n    Promise.all(respPromises).then(values => {\n      plotComparison(values);\n      console.log(values);\n    });\n    const Werte = new Map();\n    const wTest = [];\n    function setValue(map, key, value) {\n      if (!map.has(key)) {\n        map.set(key, new Set([value]));\n        return;\n      }\n      map.get(key).add(value);\n    }\n    const respPromisesPowerConsump = currentValue.map(item => getPowerConsumptionValue(item));\n    console.log(respPromisesPowerConsump);\n    Promise.all(respPromisesPowerConsump).then(values => {\n      console.log('PowerConsumptionArray', values);\n      wTest.push(values);\n      console.log(\"SUKA\", wTest);\n      for (var i = 0; i < values.length; i++) {\n        setValue(Werte, values[i].id, values[i].data);\n      }\n      console.log('aktuelleWerteinPC:', Werte);\n    });\n    const respPromisesAvrgPowerConsump = currentValue.map(item => getAvrgPowerConsumptionValue(item));\n    console.log(respPromisesAvrgPowerConsump);\n    Promise.all(respPromisesAvrgPowerConsump).then(values => {\n      console.log('AvrgPowerConsumptionArray', values);\n      // wTest.push(values[0].data = + values);\n      console.log(\"SUKA22\", wTest);\n      for (var i = 0; i < wTest.length; i++) {\n        wTest[0].data += \",\" + values;\n        setValue(Werte, values[i].id, values[i].data);\n      }\n      console.log('aktuelleWerteinArvgPC:', Werte);\n    });\n    const respPromisesMaxPowerConsump = currentValue.map(item => getMaxPowerConsumptionValue(item));\n    console.log(respPromisesMaxPowerConsump);\n    Promise.all(respPromisesMaxPowerConsump).then(values => {\n      console.log('MaxPowerConsumptionArray', values);\n      for (var i = 0; i < values.length; i++) {\n        setValue(Werte, values[i].id, values[i].data);\n      }\n      console.log('aktuelleWerteinMaxPC:', Werte);\n    });\n\n    // createRow(Werte);\n  };\n\n  const options = [];\n  for (var i = 1; i <= 56; i++) {\n    if (i !== 50 && i !== 30) {\n      options.push({\n        value: i,\n        text: `GerÃ¤t ${i}`\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'm-4',\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      sx: {\n        m: 1,\n        width: 300\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"demo-multiple-checkbox-label\",\n        children: \"Ger\\xE4te zum Vergleich w\\xE4hlen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"demo-multiple-checkbox-label\",\n        id: \"demo-multiple-checkbox\",\n        multiple: true,\n        value: selectedIds,\n        onChange: handleChange,\n        input: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n          label: \"Ger\\xE4te zum Vergleich w\\xE4hlen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 28\n        }, this),\n        renderValue: selected => selected.join(' , '),\n        MenuProps: MenuProps,\n        children: options.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: option.value,\n          children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n            checked: selectedIds.indexOf(option.value) > -1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: option.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this)]\n        }, option.text, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 47\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"graphvergleich\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 13\n  }, this);\n  function getData(geraetNummer) {\n    if (geraetNummer !== '-1') {\n      return axios.get(`/api/get_graph_daten/${geraetNummer}`).then(response => {\n        console.log(response);\n        return {\n          id: geraetNummer,\n          data: response.data.messungen\n        };\n      });\n    }\n  }\n}\n_s(SelectBox, \"ndxFfIZ7sJtBEOivcsSBDBZx8+M=\");\n_c = SelectBox;\nvar _c;\n$RefreshReg$(_c, \"SelectBox\");","map":{"version":3,"names":["React","OutlinedInput","InputLabel","MenuItem","FormControl","ListItemText","Select","Checkbox","axios","plotComparison","getPowerConsumptionValue","getAvrgPowerConsumptionValue","getMaxPowerConsumptionValue","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","SelectBox","selectedIds","setSelectedIds","useState","handleChange","event","target","value","console","log","split","currentValue","respPromises","map","item","getData","Promise","all","then","values","Werte","Map","wTest","setValue","key","has","set","Set","get","add","respPromisesPowerConsump","push","i","length","id","data","respPromisesAvrgPowerConsump","respPromisesMaxPowerConsump","options","text","m","selected","join","option","indexOf","geraetNummer","response","messungen"],"sources":["/Users/aleksandrapeshkina/projects/swtp-2022-07/frontend/src/NewSelect.js"],"sourcesContent":["import * as React from 'react';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport ListItemText from '@mui/material/ListItemText';\nimport Select from '@mui/material/Select';\nimport Checkbox from '@mui/material/Checkbox';\nimport axios from \"axios\";\nimport {plotComparison} from './Chart';\nimport getPowerConsumptionValue, {getAvrgPowerConsumptionValue, getMaxPowerConsumptionValue} from './PowerConsumption';\n// import {createRow} from \"./StatisticsTable\";\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP, width: 250,\n        },\n    },\n};\n\nexport default function SelectBox() {\n    const [selectedIds, setSelectedIds] = React.useState([]);\n\n    const handleChange = (event) => {\n        const {\n            target: {value},\n        } = event;\n        console.log(value)\n        setSelectedIds(// On autofill we get a stringified value.\n            typeof value === 'string' ? value.split(' , ') : value,);\n        const currentValue = typeof value === 'string' ? value.split(',') : value;\n        const respPromises = currentValue.map(item => getData(item));\n        console.log(respPromises);\n        Promise.all(respPromises).then((values) => {\n            plotComparison(values);\n            console.log(values);\n        });\n\n        const Werte = new Map();\nconst wTest=[];\n        function setValue(map, key, value) {\n            if (!map.has(key)) {\n                map.set(key, new Set([value]));\n                return;\n            }\n            map.get(key).add(value);\n        }\n\n        const respPromisesPowerConsump = currentValue.map(item => getPowerConsumptionValue(item));\n        console.log(respPromisesPowerConsump);\n        Promise.all(respPromisesPowerConsump).then((values) => {\n            console.log('PowerConsumptionArray', values);\n           \n            wTest.push(values);\n\n            console.log(\"SUKA\", wTest);\n            \n            for (var i = 0; i < values.length; i++) {\n\n                setValue(Werte, values[i].id, values[i].data)\n            }\n            console.log('aktuelleWerteinPC:', Werte)\n        });\n\n        const respPromisesAvrgPowerConsump = currentValue.map(item => getAvrgPowerConsumptionValue(item));\n        console.log(respPromisesAvrgPowerConsump);\n        Promise.all(respPromisesAvrgPowerConsump).then((values) => {\n            console.log('AvrgPowerConsumptionArray', values);\n            // wTest.push(values[0].data = + values);\n            console.log(\"SUKA22\", wTest);\n            for (var i = 0; i < wTest.length; i++) {\n                wTest[0].data += \",\" + values;\n                setValue(Werte, values[i].id, values[i].data)\n            }\n            console.log('aktuelleWerteinArvgPC:', Werte)\n        });\n\n        const respPromisesMaxPowerConsump = currentValue.map(item => getMaxPowerConsumptionValue(item));\n        console.log(respPromisesMaxPowerConsump);\n        Promise.all(respPromisesMaxPowerConsump).then((values) => {\n            console.log('MaxPowerConsumptionArray', values);\n            for (var i = 0; i < values.length; i++) {\n                setValue(Werte, values[i].id, values[i].data)\n            }\n            console.log('aktuelleWerteinMaxPC:', Werte)\n        });\n\n        // createRow(Werte);\n\n    };\n\n    const options = [];\n    for (var i = 1; i <= 56; i++) {\n        if (i !== 50 && i !== 30) {\n            options.push({value: i, text: `GerÃ¤t ${i}`});\n        }\n    }\n\n    return (<div className={'m-4'}>\n            <FormControl sx={{m: 1, width: 300}}>\n                <InputLabel id=\"demo-multiple-checkbox-label\">GerÃ¤te zum Vergleich wÃ¤hlen</InputLabel>\n                <Select\n                    labelId=\"demo-multiple-checkbox-label\"\n                    id=\"demo-multiple-checkbox\"\n                    multiple\n                    value={selectedIds}\n                    onChange={handleChange}\n\n                    input={<OutlinedInput label=\"GerÃ¤te zum Vergleich wÃ¤hlen\"/>}\n                    renderValue={(selected) => selected.join(' , ')}\n                    MenuProps={MenuProps}\n                >\n                    {options.map((option) => (<MenuItem key={option.text} value={option.value}>\n                            <Checkbox checked={selectedIds.indexOf(option.value) > -1}/>\n                            <ListItemText primary={option.text}/>\n                        </MenuItem>))}\n                </Select>\n            </FormControl>\n            <div id=\"graphvergleich\"></div>\n        </div>);\n\n    function getData(geraetNummer) {\n        if (geraetNummer !== '-1') {\n            return axios.get(`/api/get_graph_daten/${geraetNummer}`).then(response => {\n                console.log(response)\n                return {id: geraetNummer, data: response.data.messungen};\n            })\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
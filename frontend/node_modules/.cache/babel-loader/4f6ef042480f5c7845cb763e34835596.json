{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandrapeshkina/projects/swtp-2022-07/frontend/src/GroupContainer.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport GroupInspector from \"./GroupInspector\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Accordion from 'react-bootstrap/Accordion';\nimport { toast, ToastContainer } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst makeRequest = callback => {\n  axios.get(`/api/alle_gruppen`).then(response => {\n    callback(response);\n  });\n};\nfunction gruppeErstellen(gruppenName, callback) {\n  axios.get(`/api/gruppe_hinzufuegen/${gruppenName}`).then(response => {\n    console.log(response);\n    console.log(\"created group\");\n    callback();\n    toast(\"Gruppe gespeichert!\");\n  });\n}\nexport default function GroupContainer() {\n  _s();\n  const [groups, setGroups] = useState([]);\n  const [newGroupName, setNewGroupName] = useState(\"\");\n  useEffect(() => {\n    makeRequest(response => {\n      setGroups(response.data);\n    });\n    return () => {};\n  }, []);\n  function reset_container() {\n    makeRequest(response => {\n      setGroups(response.data);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formBasicEmail\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Gruppenname\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          value: newGroupName,\n          onChange: e => {\n            setNewGroupName(e.target.value);\n          },\n          placeholder: \"Name f\\xFCr die neue Gruppe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: () => {\n          if (newGroupName) {\n            gruppeErstellen(newGroupName, () => {\n              reset_container();\n            });\n          } else {\n            toast(\"⚠️ Bitte einen Namen eingeben\");\n          }\n        },\n        children: \"Gruppe hinzuf\\xFCgen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n      className: \"my-3\",\n      children: /*#__PURE__*/_jsxDEV(Accordion.Item, {\n        eventKey: \"1\",\n        children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n          children: \"Gespeicherte Gruppen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Accordion.Body, {\n          children: groups.map(group => {\n            return /*#__PURE__*/_jsxDEV(GroupInspector, {\n              groupID: group.id,\n              groupName: group.name,\n              resetter: reset_container\n            }, group.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 11\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(GroupContainer, \"4KGpuUoND9V0mLxPdspSS7zjEzw=\");\n_c = GroupContainer;\nvar _c;\n$RefreshReg$(_c, \"GroupContainer\");","map":{"version":3,"names":["useEffect","useState","axios","GroupInspector","Button","Form","Accordion","toast","ToastContainer","makeRequest","callback","get","then","response","gruppeErstellen","gruppenName","console","log","GroupContainer","groups","setGroups","newGroupName","setNewGroupName","data","reset_container","e","target","value","map","group","id","name"],"sources":["/Users/aleksandrapeshkina/projects/swtp-2022-07/frontend/src/GroupContainer.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport GroupInspector from \"./GroupInspector\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Accordion from 'react-bootstrap/Accordion';\nimport { toast, ToastContainer } from \"react-toastify\";\n\nconst makeRequest = (callback) => {\n  axios.get(`/api/alle_gruppen`).then((response) => {\n    callback(response);\n  });\n};\n\nfunction gruppeErstellen(gruppenName, callback) {\n  axios.get(`/api/gruppe_hinzufuegen/${gruppenName}`).then((response) => {\n    console.log(response);\n    console.log(\"created group\");\n    callback();\n    toast(\"Gruppe gespeichert!\");\n  });\n}\n\nexport default function GroupContainer() {\n  const [groups, setGroups] = useState([]);\n  const [newGroupName, setNewGroupName] = useState(\"\");\n  useEffect(() => {\n    makeRequest((response) => {\n      setGroups(response.data);\n    });\n    return () => {};\n  }, []);\n  function reset_container() {\n    makeRequest((response) => {\n      setGroups(response.data);\n    });\n  }\n  return (\n    <>\n      <Form>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n          <Form.Label>Gruppenname</Form.Label>\n          <Form.Control\n            value={newGroupName}\n            onChange={(e) => {\n              setNewGroupName(e.target.value);\n            }}\n            placeholder=\"Name für die neue Gruppe\"\n          />\n        </Form.Group>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            if (newGroupName) {\n              gruppeErstellen(newGroupName, () => {\n                reset_container();\n              });\n            } else {toast(\"⚠️ Bitte einen Namen eingeben\");}\n          }}\n        >\n          Gruppe hinzufügen\n        </Button>\n      </Form>\n      <Accordion className=\"my-3\">\n      <Accordion.Item eventKey=\"1\">\n              <Accordion.Header>Gespeicherte Gruppen</Accordion.Header>\n              <Accordion.Body>\n\n      {groups.map((group) => {\n        return (\n          <GroupInspector\n            key={group.id}\n            groupID={group.id}\n            groupName={group.name}\n            resetter={reset_container}\n            \n          />\n        );\n      })}\n       </Accordion.Body>\n            </Accordion.Item>\n          </Accordion>\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
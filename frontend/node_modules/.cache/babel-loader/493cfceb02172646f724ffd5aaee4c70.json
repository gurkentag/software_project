{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandrapeshkina/projects/swtp-2022-07/frontend/src/Chart.js\";\nimport ReactDOM from 'react-dom/client';\nimport React from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport const options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: 'top'\n    },\n    title: {\n      display: true,\n      text: 'Graphen von ausgewählten Geräten'\n    }\n  }\n};\nfunction formatTimestamp(unixtimestamp) {\n  var date = new Date(unixtimestamp * 1000);\n  var hours = String('00' + date.getHours());\n  var minutes = String('00' + date.getMinutes());\n  var seconds = String('00' + date.getSeconds());\n  var formattedTime = hours.substring(hours.length - 2) + ':' + minutes.substring(minutes.length - 2) + ':' + seconds.substring(seconds.length - 2);\n  return formattedTime;\n}\nexport function plotComparison(gerätArray) {\n  var times;\n  const datasets = [];\n  for (var i = 0; i < gerätArray.length; i++) {\n    const geraetNummer = gerätArray[i].id;\n    const messungen = gerätArray[i].data.sort((a, b) => a[1] - b[1]);\n    times = messungen.map(messungen => formatTimestamp(messungen[1]));\n    const dataRounded = messungen.map(messungen => messungen[0].toFixed(2));\n    datasets.push({\n      label: `Gerät ${geraetNummer}`,\n      data: dataRounded,\n      borderColor: 'rgba(100, 27, 150, 0.75)',\n      // backgroundColor: 'rgba(255, 236, 179, 0.5)' gelb\n      // backgroundColor: 'rgba(200, 200, 200, 1)' //grau\n      backgroundColor: 'rgba(255, 255, 255, 1)' //weiß\n    });\n  }\n\n  const data = {\n    labels: times,\n    datasets: datasets\n  };\n  ReactDOM.createRoot(document.getElementById(\"graphvergleich\")).render( /*#__PURE__*/_jsxDEV(Line, {\n    options: options,\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 14\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"names":["ReactDOM","React","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","register","options","responsive","plugins","legend","position","title","display","text","formatTimestamp","unixtimestamp","date","Date","hours","String","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substring","length","plotComparison","gerätArray","times","datasets","i","geraetNummer","id","messungen","data","sort","a","b","map","dataRounded","toFixed","push","label","borderColor","backgroundColor","labels","createRoot","document","getElementById","render"],"sources":["/Users/aleksandrapeshkina/projects/swtp-2022-07/frontend/src/Chart.js"],"sourcesContent":["import ReactDOM from 'react-dom/client';\nimport React from \"react\";\n\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport {Line} from 'react-chartjs-2';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nexport const options = {\n    responsive: true,\n    plugins: {\n        legend: {\n            position: 'top',\n        },\n        title: {\n            display: true,\n            text: 'Graphen von ausgewählten Geräten',\n        },\n    },\n};\n\nfunction formatTimestamp(unixtimestamp) {\n    var date = new Date(unixtimestamp * 1000);\n    var hours = String('00' + date.getHours())\n    var minutes = String('00' + date.getMinutes());\n    var seconds = String('00' + date.getSeconds());\n    var formattedTime = hours.substring(hours.length - 2) + ':' + minutes.substring(minutes.length - 2) + ':' + seconds.substring(seconds.length - 2);\n    return formattedTime;\n}\n\nexport function plotComparison(gerätArray) {\n    var times;\n    const datasets = [];\n\n    for (var i = 0; i < gerätArray.length; i++) {\n        const geraetNummer = gerätArray[i].id;\n        const messungen = gerätArray[i].data.sort((a, b) => a[1] - b[1]);\n        times = messungen.map(messungen => formatTimestamp(messungen[1]));\n        const dataRounded = messungen.map(messungen => messungen[0].toFixed(2));\n        datasets.push(\n            {\n                label: `Gerät ${geraetNummer}`,\n                data: dataRounded,\n                borderColor: 'rgba(100, 27, 150, 0.75)',\n                // backgroundColor: 'rgba(255, 236, 179, 0.5)' gelb\n                // backgroundColor: 'rgba(200, 200, 200, 1)' //grau\n                backgroundColor: 'rgba(255, 255, 255, 1)' //weiß\n            })\n    }\n\n    const data = {\n        labels: times,\n        datasets: datasets\n    };\n\n    ReactDOM.createRoot(document.getElementById(\"graphvergleich\")).render(\n        <Line options={options} data={data}/>\n    )\n\n    return (\n        <>\n            {<div className='Graph'></div>}\n        </>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
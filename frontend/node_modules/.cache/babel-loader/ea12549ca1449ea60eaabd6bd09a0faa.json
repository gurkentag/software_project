{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandrapeshkina/projects/swtp-2022-07/frontend/src/ChartData.js\";\nimport ReactDOM from 'react-dom/client';\n// import {CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis} from \"recharts\";\nimport React from \"react\";\nimport { App } from './Chart';\nimport axios from \"axios\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport const options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: 'top'\n    },\n    title: {\n      display: true,\n      text: 'Chart.js Line Chart'\n    }\n  }\n};\nconst labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\nexport const data = {\n  labels,\n  datasets: [{\n    label: 'Dataset 1',\n    data: labels.map(() => Math.floor(Math.random() * 10)),\n    borderColor: 'rgb(255, 99, 132)',\n    backgroundColor: 'rgba(255, 99, 132, 0.5)'\n  }, {\n    label: 'Dataset 2',\n    data: labels.map(() => Math.floor(Math.random() * 10)),\n    borderColor: 'rgb(53, 162, 235)',\n    backgroundColor: 'rgba(53, 162, 235, 0.5)'\n  }]\n};\nfunction formatTimestamp(unixtimestamp) {\n  var date = new Date(unixtimestamp * 1000);\n  var hours = String('00' + date.getHours());\n  var minutes = String('00' + date.getMinutes());\n  var seconds = String('00' + date.getSeconds());\n  var formattedTime = hours.substring(hours.length - 2) + ':' + minutes.substring(minutes.length - 2) + ':' + seconds.substring(seconds.length - 2);\n  return formattedTime;\n}\nexport function plotComparison(messungen1, messungen2, geraetNummer1, geraetNummer2) {\n  if (messungen1 === [] || messungen2 === []) {\n    return;\n  }\n  messungen1 = messungen1.sort((a, b) => a[1] - b[1]);\n  const labels = messungen1.map(messungen => formatTimestamp(messungen[1]));\n  const data1 = messungen1.map(messungen => messungen[0].toFixed(2));\n  messungen1 = messungen2.sort((a, b) => a[1] - b[1]);\n  const data2 = messungen2.map(messungen => messungen[0].toFixed(2));\n  const data = {\n    labels,\n    datasets: [{\n      label: 'Dataset 1',\n      data: data1,\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.5)'\n    }, {\n      label: 'Dataset 2',\n      data: data2,\n      borderColor: 'rgb(53, 162, 235)',\n      backgroundColor: 'rgba(53, 162, 235, 0.5)'\n    }]\n  };\n  ReactDOM.createRoot(document.getElementById(\"graphvergleich\")).render( /*#__PURE__*/_jsxDEV(Line, {\n    options: options,\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this));\n\n  //     messungen1 = messungen1.sort((a, b) => a[1] - b[1])\n  //     messungen1 = messungen1.map(messungen => ([messungen[0].toFixed(2), formatTimestamp(messungen[1])]))\n  //     messungen2 = messungen2.sort((a, b) => a[1] - b[1])\n  //     messungen2 = messungen2.map(messungen => ([messungen[0].toFixed(2), formatTimestamp(messungen[1])]))\n  //     ReactDOM.createRoot(document.getElementById(\"graphvergleich\")).render(\n  //         <div>\n  //         <LineChart\n  //             width={1400}\n  //             height={400}\n  //             data={messungen1}       //TODO: damit die Tooltips funktionieren muss hier und in Zeile 41 was ge채ndert werden\n  //             margin={{\n  //                 top: 5,\n  //                 right: 30,\n  //                 left: 20,\n  //                 bottom: 5,\n  //             }}\n  //         >\n  //             <CartesianGrid strokeDasharray=\"3 3\"/>\n  //             <XAxis dataKey=\"1\" /*label={{value: ``, position: \"insideBottomLeft\", dy: 25}}*/ />\n  //             <YAxis dataKey=\"0\" domain={[0, 8]}/>\n  //             <Tooltip/>\n  //             <Legend/>\n  //             <Line name={'Ger채t '+geraetNummer1}\n  //                   //data={messungen1}\n  //                   type=\"monotone\"\n  //                   dataKey=\"0\"\n  //                   stroke=\"#274796\"\n  //                   dot={false}\n  //                   strokeWidth={2}\n  //             />\n  //             <Line name={'Ger채t '+geraetNummer2}\n  //                   data={messungen2}\n  //                   type=\"monotone\"\n  //                   dataKey=\"0\"\n  //                   stroke=\"#F3942F\"\n  //                   dot={false}\n  //                   strokeWidth={2}\n  //             />\n  //         </LineChart>\n\n  //         <App/>\n  //         </div>)\n  // }\n\n  // export function getChartData(geraetNummer) {\n\n  //     function makerequest() {\n  //         if (geraetNummer === '-1') {\n  //             console.log(\"no number supllied\")\n  //             return\n  //         }\n  //         axios.get(`/api/get_graph_daten/${geraetNummer}`).then(response => {\n  //             console.log(response)\n  //             var messungen = response.data.messungen;\n  //             messungen = messungen.sort((a, b) => a[1] - b[1])\n  //             messungen = messungen.map(messungen => ([messungen[0].toFixed(2), formatTimestamp(messungen[1])]))\n\n  //             ReactDOM.createRoot(document.getElementById(\"graphdaten\")).render(\n  //                 <LineChart\n  //                     width={1400}\n  //                     height={400}\n  //                     margin={{\n  //                         top: 5,\n  //                         right: 30,\n  //                         left: 20,\n  //                         bottom: 5,\n  //                     }}\n  //                 >\n  //                     <CartesianGrid strokeDasharray=\"3 3\"/>\n  //                     <XAxis dataKey=\"1\" /*label={{value: ``, position: \"insideBottomLeft\", dy: 25}}*/ />\n  //                     <YAxis dataKey=\"0\" domain={[0, 8]}/>\n  //                     <Tooltip/>\n  //                     <Legend/>\n  //                     <Line name={`aktueller Verbrauch von Ger채t ${geraetNummer}`}\n  //                           data={messungen}\n  //                           type=\"monotone\"\n  //                           dataKey=\"0\"\n  //                           stroke=\"#216d41\"\n  //                           dot={false}\n  //                           strokeWidth={2}\n  //                     />\n  // </LineChart>)\n  // })\n  // }\n\n  makerequest();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'm-5',\n      id: \"graphdaten\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 14\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"names":["ReactDOM","React","App","axios","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","register","options","responsive","plugins","legend","position","title","display","text","labels","data","datasets","label","map","Math","floor","random","borderColor","backgroundColor","formatTimestamp","unixtimestamp","date","Date","hours","String","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substring","length","plotComparison","messungen1","messungen2","geraetNummer1","geraetNummer2","sort","a","b","messungen","data1","toFixed","data2","createRoot","document","getElementById","render","makerequest"],"sources":["/Users/aleksandrapeshkina/projects/swtp-2022-07/frontend/src/ChartData.js"],"sourcesContent":["import ReactDOM from 'react-dom/client';\n// import {CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis} from \"recharts\";\nimport React from \"react\";\nimport { App } from './Chart';\nimport axios from \"axios\";\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\n  import { Line } from 'react-chartjs-2';\n\n  ChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n  );\n  \n  export const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart',\n      },\n    },\n  };\n  \n  const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n  \n  export const data = {\n    labels,\n    datasets: [\n      {\n        label: 'Dataset 1',\n        data: labels.map(() => Math.floor(Math.random() * 10)),\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\n      },\n      {\n        label: 'Dataset 2',\n        data: labels.map(() => Math.floor(Math.random() * 10)),\n        borderColor: 'rgb(53, 162, 235)',\n        backgroundColor: 'rgba(53, 162, 235, 0.5)',\n      },\n    ],\n  };\n\n\n\n\n\n\n\n\n\nfunction formatTimestamp(unixtimestamp) {\n    var date = new Date(unixtimestamp * 1000);\n    var hours = String('00' + date.getHours())\n    var minutes = String('00' + date.getMinutes());\n    var seconds = String('00' + date.getSeconds());\n    var formattedTime = hours.substring(hours.length - 2) + ':' + minutes.substring(minutes.length - 2) + ':' + seconds.substring(seconds.length - 2);\n    return formattedTime;\n}\n\nexport function plotComparison(messungen1, messungen2, geraetNummer1, geraetNummer2) {\n    if(messungen1 === [] || messungen2 === []){\n        return\n    }\n\n    messungen1 = messungen1.sort((a, b) => a[1] - b[1])\n    const labels = messungen1.map(messungen =>  formatTimestamp(messungen[1]));\n    const data1=messungen1.map(messungen => messungen[0].toFixed(2));\n    messungen1 = messungen2.sort((a, b) => a[1] - b[1]);\n    const data2 =  messungen2.map(messungen => messungen[0].toFixed(2));\n    const data = {\n        labels,\n        datasets: [\n          {\n            label: 'Dataset 1',\n            data: data1,\n            borderColor: 'rgb(255, 99, 132)',\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\n          },\n          {\n            label: 'Dataset 2',\n            data: data2,\n            borderColor: 'rgb(53, 162, 235)',\n            backgroundColor: 'rgba(53, 162, 235, 0.5)',\n          },\n        ],\n      };\n    ReactDOM.createRoot(document.getElementById(\"graphvergleich\")).render(\n        <Line options={options} data={data} />\n    )\n    \n   \n//     messungen1 = messungen1.sort((a, b) => a[1] - b[1])\n//     messungen1 = messungen1.map(messungen => ([messungen[0].toFixed(2), formatTimestamp(messungen[1])]))\n//     messungen2 = messungen2.sort((a, b) => a[1] - b[1])\n//     messungen2 = messungen2.map(messungen => ([messungen[0].toFixed(2), formatTimestamp(messungen[1])]))\n//     ReactDOM.createRoot(document.getElementById(\"graphvergleich\")).render(\n//         <div>\n//         <LineChart\n//             width={1400}\n//             height={400}\n//             data={messungen1}       //TODO: damit die Tooltips funktionieren muss hier und in Zeile 41 was ge채ndert werden\n//             margin={{\n//                 top: 5,\n//                 right: 30,\n//                 left: 20,\n//                 bottom: 5,\n//             }}\n//         >\n//             <CartesianGrid strokeDasharray=\"3 3\"/>\n//             <XAxis dataKey=\"1\" /*label={{value: ``, position: \"insideBottomLeft\", dy: 25}}*/ />\n//             <YAxis dataKey=\"0\" domain={[0, 8]}/>\n//             <Tooltip/>\n//             <Legend/>\n//             <Line name={'Ger채t '+geraetNummer1}\n//                   //data={messungen1}\n//                   type=\"monotone\"\n//                   dataKey=\"0\"\n//                   stroke=\"#274796\"\n//                   dot={false}\n//                   strokeWidth={2}\n//             />\n//             <Line name={'Ger채t '+geraetNummer2}\n//                   data={messungen2}\n//                   type=\"monotone\"\n//                   dataKey=\"0\"\n//                   stroke=\"#F3942F\"\n//                   dot={false}\n//                   strokeWidth={2}\n//             />\n//         </LineChart>\n\n\n//         <App/>\n//         </div>)\n// }\n\n// export function getChartData(geraetNummer) {\n\n//     function makerequest() {\n//         if (geraetNummer === '-1') {\n//             console.log(\"no number supllied\")\n//             return\n//         }\n//         axios.get(`/api/get_graph_daten/${geraetNummer}`).then(response => {\n//             console.log(response)\n//             var messungen = response.data.messungen;\n//             messungen = messungen.sort((a, b) => a[1] - b[1])\n//             messungen = messungen.map(messungen => ([messungen[0].toFixed(2), formatTimestamp(messungen[1])]))\n\n//             ReactDOM.createRoot(document.getElementById(\"graphdaten\")).render(\n//                 <LineChart\n//                     width={1400}\n//                     height={400}\n//                     margin={{\n//                         top: 5,\n//                         right: 30,\n//                         left: 20,\n//                         bottom: 5,\n//                     }}\n//                 >\n//                     <CartesianGrid strokeDasharray=\"3 3\"/>\n//                     <XAxis dataKey=\"1\" /*label={{value: ``, position: \"insideBottomLeft\", dy: 25}}*/ />\n//                     <YAxis dataKey=\"0\" domain={[0, 8]}/>\n//                     <Tooltip/>\n//                     <Legend/>\n//                     <Line name={`aktueller Verbrauch von Ger채t ${geraetNummer}`}\n//                           data={messungen}\n//                           type=\"monotone\"\n//                           dataKey=\"0\"\n//                           stroke=\"#216d41\"\n//                           dot={false}\n//                           strokeWidth={2}\n//                     />\n                // </LineChart>)\n        // })\n    // }\n\n    makerequest()\n    return (\n        <>\n            {<div className={'m-5'} id=\"graphdaten\"></div>}\n        </>\n    )\n}\n"],"mappings":"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AAI,EAAEgC,KAAK;MACXzB,WAAW,EAAE,mBAAmB;MAChCC,eAAe,EAAE;IACnB,CAAC,EACD;MACEN,KAAK,EAAE,WAAW;MAClBF,IAAI,EAAEkC,KAAK;MACX3B,WAAW,EAAE,mBAAmB;MAChCC,eAAe,EAAE;IACnB,CAAC;EAEL,CAAC;EACHhC,QAAQ,CAAC2D,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC,CAAC,CAACC,MAAM,eACjE,QAAC,IAAI;IAAC,OAAO,EAAE/C,OAAQ;IAAC,IAAI,EAAES;EAAK;IAAA;IAAA;IAAA;EAAA,QAAG,CACzC;;EAGL;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACgB;EACR;EACJ;;EAEAuC,WAAW,EAAE;EACb,oBACI;IAAA,uBACK;MAAK,SAAS,EAAE,KAAM;MAAC,EAAE,EAAC;IAAY;MAAA;MAAA;MAAA;IAAA;EAAO,iBAC/C;AAEX"},"metadata":{},"sourceType":"module"}